train_test %>% str
train_test$SalePrice1 <- train_test$SalePrice
train_test$SalePrice = NULL
train_test$SalePrice = train_test$SalePrice1
train_test$SalePrice = NULL
train_test$Alley = as.factor(train_test$Alley)
to_factor = c('MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical')
train_test[to_factor] = lapply(train_test[to_factor], factor)
train <- train_test[1:1460,]
test <- train_test[1461:2919,]
train %>% dim
test %>% dim
train %>% str()
train_test = cbind(train_test_mujtaba, train_test_madhup)
train_test$SalePrice1 <- train_test$SalePrice
train_test$SalePrice = NULL
train_test$SalePrice = train_test$SalePrice1
train_test$SalePrice1 = NULL
train_test$Alley = as.factor(train_test$Alley)
to_factor = c('MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical')
train_test[to_factor] = lapply(train_test[to_factor], factor)
train <- train_test[1:1460,]
test <- train_test[1461:2919,]
train %>% dim
test %>% dim
train %>% str()
X = train[,-c(1, 80)]
y = train[,80]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
summary(fit)
plot(YearBuilt, SalePrice)
plot(YearBuilt ~ SalePrice)
plot(table(YearBuilt ~ SalePrice))
plot(table(YearBuilt, SalePrice))
YearBuilt %>% class()
table(YearBuilt, SalePrice)
table(YearBuilt, SalePrice)
aggregate(train_test$SalePrice, by = list(train_test$YearBuilt), FUN = mean)
aggregate(train_test$SalePrice, by = list(train_test$YearBuilt), FUN = sum)
train %>% summary()
table(YearRemodAdd)
train_test = train_test_copy
train_test$Remodelling = ifelse((train_test$YearRemodAdd - train_test$YearBuilt) > 0, "YES", "NO")
train_test$BsmtUnf_prop_perc = (train_test$BsmtUnfSF/train_test$TotalBsmtSF)
train_test$age_house = train_test$YrSold - train_test$YearBuilt
train_test$cond_qual = train_test$OverallCond + train_test$OverallQual
train_test$RemodelAge = train_test$YrSold - train_test$YearRemodAdd
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train_test[to_factor] = lapply(train_test[to_factor], factor)
train_test_mujtaba = train_test[, c(1:43)]
train_test_madhup = train_test[, c(44:85)]
dim(train_test_madhup)
dim(train_test_mujtaba)
find_missing_values = function(){
missing_count <-sapply(train_test_madhup, function(y) sum(length(which(is.na(y)))))
missing_count <- data.frame(missing_count)
View(missing_count)
}
#Process FireplaceQu, NA means No Fireplace
train_test_madhup$FireplaceQu = fct_explicit_na(train_test_madhup$FireplaceQu, na_level = "No Fireplace")
#Process columns with Garage Information
train_test_madhup$GarageType = fct_explicit_na(train_test_madhup$GarageType, na_level = "No Garage")
train_test_madhup$GarageYrBlt[which(is.na(train_test_madhup$GarageYrBlt))]= 0
train_test_madhup$GarageFinish = fct_explicit_na(train_test_madhup$GarageFinish, na_level = "No Garage")
train_test_madhup$GarageQual = fct_explicit_na(train_test_madhup$GarageQual, na_level = "No Garage")
train_test_madhup$GarageCond = fct_explicit_na(train_test_madhup$GarageCond, na_level = "No Garage")
find_missing_values()
#Process columns with Pool Information
train_test_madhup$PoolQC = fct_explicit_na(train_test_madhup$PoolQC, na_level = "No Pool")
#Process columns with Fence Information
train_test_madhup$Fence = fct_explicit_na(train_test_madhup$Fence, na_level = "No Fence")
#Process Basement unfinished proportion percentage
train_test_madhup$BsmtUnf_prop_perc[which(is.na(train_test_madhup$BsmtUnf_prop_perc))]= 0
# Function to get mode of the factor variable
find_mode = function(var_name) names(table(var_name)[which.max(table(var_name))])
# Impute rest of the columns with Mode
train_test_madhup$BsmtFullBath[is.na(train_test_madhup$BsmtFullBath)] = find_mode(BsmtFullBath)
train_test_madhup$BsmtHalfBath[is.na(train_test_madhup$BsmtHalfBath)] = find_mode(BsmtHalfBath)
train_test_madhup$KitchenQual[is.na(train_test_madhup$KitchenQual)] = find_mode(KitchenQual)
train_test_madhup$Functional[is.na(train_test_madhup$Functional)] = find_mode(Functional)
train_test_madhup$GarageCars[is.na(train_test_madhup$GarageCars)] = '0'
train_test_madhup$GarageArea[is.na(train_test_madhup$GarageArea)] = 0
train_test_madhup$SaleType[is.na(train_test_madhup$SaleType)] = find_mode(SaleType)
train_test_madhup %>% View()
train_test_madhup$MiscFeature = NULL
#################################### Merge train_test_madhup dataset with Mujtaba's dataset ################################
dim(dat_complete)
train_test_mujtaba = dat_complete
train_test = cbind(train_test_mujtaba, train_test_madhup)
train_test %>% dim
train_test$SalePrice1 <- train_test$SalePrice
train_test$SalePrice = NULL
train_test$SalePrice = train_test$SalePrice1
train_test$SalePrice1 = NULL
train_test$Alley = as.factor(train_test$Alley)
to_factor = c('MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical')
train_test[to_factor] = lapply(train_test[to_factor], factor)
train <- train_test[1:1460,]
test <- train_test[1461:2919,]
train %>% dim
test %>% dim
table(YearRemodAdd)
train %>% str()
#Import Datasets
train = read.csv(file.choose(), header = TRUE)
test = read.csv(file.choose(), header = TRUE)
# Since Test set doesn't have SalePrice column, add a dummy column with repeated value of 0
test$SalePrice = rep(0, nrow(test))
# Create train_test
train_test = rbind(train, test)
#################################################### Create backups ####################################################
train_test_copy = train_test
train_test = train_test_copy
train_test$Remodelling = ifelse((train_test$YearRemodAdd - train_test$YearBuilt) > 0, "YES", "NO")
train_test$BsmtUnf_prop_perc = (train_test$BsmtUnfSF/train_test$TotalBsmtSF)
train_test$age_house = train_test$YrSold - train_test$YearBuilt
train_test$cond_qual = train_test$OverallCond + train_test$OverallQual
train_test$RemodelAge = train_test$YrSold - train_test$YearRemodAdd
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train_test[to_factor] = lapply(train_test[to_factor], factor)
train_test_mujtaba = train_test[, c(1:43)]
train_test_madhup = train_test[, c(44:85)]
str(train_test_madhup)
train_test %>% dim
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train_test[to_factor] = lapply(train_test[to_factor], factor)
train_test_mujtaba = train_test[, c(1:43)]
train_test_madhup = train_test[, c(44:86)]
dim(train_test_madhup)
dim(train_test_mujtaba)
find_missing_values = function(){
missing_count <-sapply(train_test_madhup, function(y) sum(length(which(is.na(y)))))
missing_count <- data.frame(missing_count)
View(missing_count)
}
#Process FireplaceQu, NA means No Fireplace
train_test_madhup$FireplaceQu = fct_explicit_na(train_test_madhup$FireplaceQu, na_level = "No Fireplace")
#Process columns with Garage Information
train_test_madhup$GarageType = fct_explicit_na(train_test_madhup$GarageType, na_level = "No Garage")
train_test_madhup$GarageYrBlt[which(is.na(train_test_madhup$GarageYrBlt))]= 0
train_test_madhup$GarageFinish = fct_explicit_na(train_test_madhup$GarageFinish, na_level = "No Garage")
train_test_madhup$GarageQual = fct_explicit_na(train_test_madhup$GarageQual, na_level = "No Garage")
train_test_madhup$GarageCond = fct_explicit_na(train_test_madhup$GarageCond, na_level = "No Garage")
train_test_madhup$PoolQC = fct_explicit_na(train_test_madhup$PoolQC, na_level = "No Pool")
#Process columns with Fence Information
train_test_madhup$Fence = fct_explicit_na(train_test_madhup$Fence, na_level = "No Fence")
#Process Basement unfinished proportion percentage
train_test_madhup$BsmtUnf_prop_perc[which(is.na(train_test_madhup$BsmtUnf_prop_perc))]= 0
# Function to get mode of the factor variable
find_mode = function(var_name) names(table(var_name)[which.max(table(var_name))])
# Impute rest of the columns with Mode
train_test_madhup$BsmtFullBath[is.na(train_test_madhup$BsmtFullBath)] = find_mode(BsmtFullBath)
train_test_madhup$BsmtHalfBath[is.na(train_test_madhup$BsmtHalfBath)] = find_mode(BsmtHalfBath)
train_test_madhup$KitchenQual[is.na(train_test_madhup$KitchenQual)] = find_mode(KitchenQual)
train_test_madhup$Functional[is.na(train_test_madhup$Functional)] = find_mode(Functional)
train_test_madhup$GarageCars[is.na(train_test_madhup$GarageCars)] = '0'
train_test_madhup$GarageArea[is.na(train_test_madhup$GarageArea)] = 0
train_test_madhup$SaleType[is.na(train_test_madhup$SaleType)] = find_mode(SaleType)
train_test_madhup %>% dim()
train_test_madhup$MiscFeature = NULL
train_test_mujtaba = dat_complete
train_test = cbind(train_test_mujtaba, train_test_madhup)
train_test %>% dim
train_test$SalePrice1 <- train_test$SalePrice
train_test$SalePrice = NULL
train_test$SalePrice = train_test$SalePrice1
train_test$SalePrice1 = NULL
train_test %>% str
train_test$Alley = as.factor(train_test$Alley)
to_factor = c('MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical')
train_test[to_factor] = lapply(train_test[to_factor], factor)
train <- train_test[1:1460,]
test <- train_test[1461:2919,]
train %>% dim
test %>% dim
train %>% str()
hist(RemodelAge)
hist(train$RemodelAge)
IQR(train$RemodelAge)
summary(train$RemodelAge)
quantile(train$RemodelAge)
hist(train$RemodelAge, breaks = 15)
hist(train$RemodelAge, breaks = 20)
hist(train$RemodelAge, breaks = 20)
hist(train$RemodelAge, breaks = 2)
hist(train$RemodelAge, breaks = 5)
train[train$RemodelAge < 0]
train[train$RemodelAge < 0,]
train$RemodelAge[train$RemodelAge < 0,]
train[train$RemodelAge < 0,]
train$RemodelAge[train$RemodelAge < 0]
train$RemodelAge[train$RemodelAge < 0] = 0
summary(train$RemodelAge)
hist(train$RemodelAge, breaks = 5)
hist(train$RemodelAge, breaks = 10)
train %>% str()
X = train[,-c(1, 80)]
y = train[,80]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
summary(fit)
train %>% sapply(sd)
train %>% sapply(sd>0)
train %>% sapply(sd)
options(max.print = 1000)
fit %>% summary()
options(max.print = 5000)
fit %>% summary()
#Import Datasets
train = read.csv(file.choose(), header = TRUE)
test = read.csv(file.choose(), header = TRUE)
# Since Test set doesn't have SalePrice column, add a dummy column with repeated value of 0
test$SalePrice = rep(0, nrow(test))
# Create train_test
train_test = rbind(train, test)
train_test %>% dim()
#################################################### Create backups ####################################################
train_test_copy = train_test
train_test = train_test_copy
train_test$Remodelling = ifelse((train_test$YearRemodAdd - train_test$YearBuilt) > 0, "YES", "NO")
train_test$BsmtUnf_prop_perc = (train_test$BsmtUnfSF/train_test$TotalBsmtSF)
train_test$age_house = train_test$YrSold - train_test$YearBuilt
train_test$cond_qual = train_test$OverallCond + train_test$OverallQual
train_test$RemodelAge = train_test$YrSold - train_test$YearRemodAdd
train_test %>% str()
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train_test[to_factor] = lapply(train_test[to_factor], factor)
train_test_mujtaba = train_test[, c(1:43)]
train_test_madhup = train_test[, c(44:86)]
find_missing_values = function(){
missing_count <-sapply(train_test_madhup, function(y) sum(length(which(is.na(y)))))
missing_count <- data.frame(missing_count)
View(missing_count)
}
train_test_madhup$FireplaceQu = fct_explicit_na(train_test_madhup$FireplaceQu, na_level = "No Fireplace")
#Process columns with Garage Information
train_test_madhup$GarageType = fct_explicit_na(train_test_madhup$GarageType, na_level = "No Garage")
train_test_madhup$GarageYrBlt[which(is.na(train_test_madhup$GarageYrBlt))]= 0
train_test_madhup$GarageFinish = fct_explicit_na(train_test_madhup$GarageFinish, na_level = "No Garage")
train_test_madhup$GarageQual = fct_explicit_na(train_test_madhup$GarageQual, na_level = "No Garage")
train_test_madhup$GarageCond = fct_explicit_na(train_test_madhup$GarageCond, na_level = "No Garage")
find_missing_values()
#Process columns with Pool Information
train_test_madhup$PoolQC = fct_explicit_na(train_test_madhup$PoolQC, na_level = "No Pool")
#Process columns with Fence Information
train_test_madhup$Fence = fct_explicit_na(train_test_madhup$Fence, na_level = "No Fence")
#Process Basement unfinished proportion percentage
train_test_madhup$BsmtUnf_prop_perc[which(is.na(train_test_madhup$BsmtUnf_prop_perc))]= 0
# Function to get mode of the factor variable
find_mode = function(var_name) names(table(var_name)[which.max(table(var_name))])
# Impute rest of the columns with Mode
train_test_madhup$BsmtFullBath[is.na(train_test_madhup$BsmtFullBath)] = find_mode(BsmtFullBath)
train_test_madhup$BsmtHalfBath[is.na(train_test_madhup$BsmtHalfBath)] = find_mode(BsmtHalfBath)
train_test_madhup$KitchenQual[is.na(train_test_madhup$KitchenQual)] = find_mode(KitchenQual)
train_test_madhup$Functional[is.na(train_test_madhup$Functional)] = find_mode(Functional)
train_test_madhup$GarageCars[is.na(train_test_madhup$GarageCars)] = '0'
train_test_madhup$GarageArea[is.na(train_test_madhup$GarageArea)] = 0
train_test_madhup$SaleType[is.na(train_test_madhup$SaleType)] = find_mode(SaleType)
train_test_madhup$MiscFeature = NULL
train_test_mujtaba = dat_complete
train_test = cbind(train_test_mujtaba, train_test_madhup)
train_test %>% dim
train_test$SalePrice1 <- train_test$SalePrice
train_test$SalePrice = NULL
train_test$SalePrice = train_test$SalePrice1
train_test$SalePrice1 = NULL
train_test$Alley = as.factor(train_test$Alley)
to_factor = c('MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical')
train_test[to_factor] = lapply(train_test[to_factor], factor)
train <- train_test[1:1460,]
test <- train_test[1461:2919,]
train %>% dim
test %>% dim
train %>% str()
X = train[,-c(1, 80)]
y = train[,80]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
train %>% sapply(function(x) sum(is.na(x)))
lm(SalePrice ~ age_house, data = train)
fit_age = lm(SalePrice ~ age_house, data = train)
fit_age %>% summary()
fit_age_rem = lm(SalePrice ~ RemodelAge, data = train)
fit_age_rem %>% summary()
train %>% summary()
X = train[,-c(1, 80)]
y = train[,80]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
train[826,]
train$SalePrice %>% mean()
train[524,]
train[1325,]
VIF(fit)
alias(fit)
options(max.print = 5000)
alias(fit)
train %>% summary()
find_missing_values = function(){
missing_count <-sapply(data, function(data) sum(length(which(is.na(data)))))
missing_count <- data.frame(missing_count)
View(missing_count)
}
find_missing_values()
find_missing_values(train)
find_missing_values = function(x){
missing_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
missing_count <- data.frame(missing_count)
View(missing_count)
}
find_missing_values(train)
summary(fit)
fit_age %>% summary()
fit_age_rem %>% summary()
library(dplyr)
fit_age %>% summary()
fit_age_rem %>% summary()
options(max.print = 5000)
summary(fit)
train %>% sapply(function(x) sum(is.na(x)))
# Run a linear model to get significant variables
View(train)
column_names = colnames(train)
column_names
train$YearRemodAdd
train_final = train[, -c('Street', 'Alley', 'Utilities', 'Condition2', 'YearBuilt', 'YearRemodAdd')]
train_final = train[, -c('Street', 'Alley', 'Utilities', 'Condition2', 'YearBuilt', 'YearRemodAdd')]
train_final = train[, -c("Street", "Alley", "Utilities", "Condition2", "YearBuilt", "YearRemodAdd")]
train_final <- train[, -c("Street", "Alley", "Utilities", "Condition2", "YearBuilt", "YearRemodAdd")]
drops <- c("x","z")
train_final = train[ , !(names(train) %in% drops)]
drops <- c("Street", "Alley", "Utilities", "Condition2", "YearBuilt", "YearRemodAdd")
train_final = train[ , !(names(train) %in% drops)]
train_final
View(train_final)
which(names(train_final) == "SalePrice")
X = train_final[,-c((which(names(train_final) == "SalePrice" | "Id")))]
X = train_final[,-c(1,74)]
y = train_final[,74]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
train_final$PoolArea = as.numeric(train_final$PoolArea)
X = train_final[,-c(1,74)]
y = train_final[,74]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
drops <- c("Street", "Alley", "Utilities", "Condition2", "YearBuilt", "YearRemodAdd", "cond_qual")
train_final = train[ , !(names(train) %in% drops)]
# Convert pool area to numeric
train_final$PoolArea = as.numeric(train_final$PoolArea)
which(names(train_final) == "SalePrice")
X = train_final[,-c(1,74)]
y = train_final[,74]
Z = as.data.frame(cbind(X, y))
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
####################################################### Random Forest ########################################
library(randomForest)
rf_fit = randomForest(y ~ ., data = train_final, importance = TRUE)
rf_fit
summary(rf_fit)
print(rf_fit)
importance(rf_fit)
plot(importance(rf_fit))
plot(rf_fit)
varImpPlot(rf_fit,type=2)
which(names(train_final) == "SalePrice")
X
which(names(X) == "SalePrice")
rf_fit = randomForest(y ~ X, data = train_final, importance = TRUE)
rf_fit = randomForest(y ~ list(X), data = train_final, importance = TRUE)
rf_fit = randomForest(y ~ ., data = Z, importance = TRUE)
varImpPlot(rf_fit,type=2)
options(scipen = 999)
varImpPlot(rf_fit,type=2)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
Z = Z[-c(524, 899, 692),]
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
Z = Z[-c(1325,524, 899, 692),]
fit = lm(y ~ ., data = Z)
options(max.print = 5000)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
X = train_final[,-c(1,74)]
y = train_final[,74]
Z = as.data.frame(cbind(X, y))
Z = Z[-c(1325,524, 899, 692),]
rf_fit = randomForest(y ~ ., data = Z, importance = TRUE)
plot(rf_fit)
options(scipen = 999)
varImpPlot(rf_fit,type=2)
dev.off()
varImpPlot(rf_fit,type=2)
print(rf_fit)
?tuneRF
tuneRF(X, y, mtryStart = 25, ntreeTry = 500)
View(test)
drop_test <- c("Sales_Price", "cond_qual")
test_final = test[ , !(names(test) %in% drops)]
col_test = colnames(test)
col_test
col_test = colnames(test_final)
col_test
test_final$PoolArea = as.numeric(test_final$PoolArea)
smp_size <- floor(0.75 * nrow(train_final))
set.seed(123)
train_ind <- sample(seq_len(nrow(train_final)), size = smp_size)
train_pred <- train_final[train_ind, ]
test_pred <- train_final[-train_ind, ]
dim(train_pred)
dim(test_pred)
rf_fit = randomForest(y ~ ., data = Z, importance = TRUE)
plot(rf_fit)
varImpPlot(rf_fit,type=2)
pred <- predict(rf_fit, newdata = test_final)
pred <- predict(rf_fit, newdata = test_pred)
pred
rmse(train_pred$SalePrice, pred)
postResample(train_pred$SalePrice, pred)
####################################################### split train and evaluate models ###########################
library(caret)
postResample(train_pred$SalePrice, pred)
rmse = sqrt(mean((pred-train_pred$SalePrice)^2))
sqrt(mean((pred-train_pred$SalePrice)^2))
postResample(test_pred$SalePrice, pred)
pred <- predict(rf_fit, newdata = test_final)
pred
View(pred)
final_result = as.data.frame(test_final$Id, pred)
final_result = as.data.frame(pred)
View(final_result)
write.csv(final_result, file = "result.csv", row.names = FALSE)
test_final[c(1916,
2121,
2152,
2217,
2251,
2905),]
test[c(1916,
2121,
2152,
2217,
2251,
2905),]
test  %>% dim()
test  %>% is.na()
test  %>% sum(is.na())
test  %>% sum(is.na)
test  %>% sum(is.null())
test  %>% View()
test[c(1916,
2121,
2152,
2217,
2251,
2905),]
test[c(1916,
2121,
2152,
2217,
2251,
2905),]  %>% View()
test[c(1916,2121,2152,2217,2251,2905),]  %>% View()
find_missing_values(test)
mean(train_final$SalePrice)
postResample(test_pred$SalePrice, pred)
####################################################### split train and evaluate models ###########################
library(caret)
postResample(test_pred$SalePrice, pred)
pred <- predict(rf_fit, newdata = test_pred)
postResample(test_pred$SalePrice, pred)
X = train_pred[,-c(1,74)]
y = train_pred[,74]
Z = as.data.frame(cbind(X, y))
Z = Z[-c(1325,524, 899, 692),]
rf_fit = randomForest(y ~ ., data = Z, importance = TRUE)
####################################################### Random Forest ########################################
library(randomForest)
X = train_pred[,-c(1,74)]
y = train_pred[,74]
Z = as.data.frame(cbind(X, y))
Z = Z[-c(1325,524, 899, 692),]
rf_fit = randomForest(y ~ ., data = Z, importance = TRUE)
varImpPlot(rf_fit,type=2)
pred <- predict(rf_fit, newdata = test_pred)
postResample(test_pred$SalePrice, pred)
options(scipen = 999)
postResample(test_pred$SalePrice, pred)
mean(train_final$SalePrice)
27830.3105575/180921.2
