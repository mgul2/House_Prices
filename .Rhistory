flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
View(y)
View(y1)
final_1 <- cbind(final, y1)
#y1 <- NULL
y1 <- y1[-84,]
final_1 <- cbind(final, y1)
View(final_1)
#----------------------------------------------------------------------------------------------------------------------
View(y1)
dim(y1)
sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26))
c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,dfsd]
mm <- c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,mm]
View(y2)
dim(y2)
y2 <- y1[,c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))]
View(final)
View(y2)
reordering_function <- c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,reordering_function]
View(y2)
View(response)
final_1 <- cbind(final, y2)
View(final_1)
View(y1)
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:25) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
View(y1)
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
dim(final)
unique_team <- unique(final$Team)
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
library(dplyr)
response <- read.csv(file.choose(), header=TRUE) #reads data for each team into response
View(response)
dim(response)
Team=matrix(as.character(response$Team)) # So that the program doesn't convert team names into numbers. Have to find a better way.
noofstudents=nrow(response) #Total number of students
noofvariables=ncol(response[,10:165])#no of variables including peer ratings for every variable
unique_variables=26 #unique variables. Change this if the no of measures change
Max_members=6 # Maximum possible number of members in any group. Change this if maximum changes
final=matrix(nrow = noofstudents, ncol = noofvariables+1)#final matrix for the sorted data
rownames(final)=response$ID #entering the IDs in the final matrix used for storing the rearranged data
colnames(final)=colnames(response[,9:165]) #naming the column names in final matrix. Change the numbers if any new col is instered in the "peerforR.csv" file.
final=as.data.frame(final,stringsAsFactors=FALSE)
# final = NULL
count_team=1 #the count for every team
while (count_team <= noofstudents) #loop for moving down the list of teams.
{
valuestart=10 #strting col of the first variable. Change if any new col is inserted in the peerforR file
valueend=15 #ending variable of the first variable. Change if any new col is inserted in the peerforR file
colstart=2 # starting col for every variable in final file. Change if any new col is inserted in final
colend=7 #ending col for every variable in final file. Change if any new col is inserted in final
student_team=response$Team[count_team] #team the student belongs to
immediate_team=as.data.frame(subset(response,response$Team==student_team)) #extracts the data for the focus team ( team whose data is being sorted)
group_members=as.matrix(immediate_team$ID) #list of group members in the focus team
group_members=group_members[order(group_members)] #orders the group member IDs in ascending order. This is just a precaution.
group_size=length(group_members) #size of each group
final$Team[count_team:(count_team+group_size-1)]=Team[count_team:(count_team+group_size-1),1] #enters the team details in "final"
for(count in 1:unique_variables) { # loop for sorting data for each of the measures for the focus team
ID=matrix(group_members,nrow = group_size, ncol = group_size, byrow = TRUE) #Fill Id matrix with rated ID, 1-6 rows are the ratee arranged in ascending order in code form
res_arranged=matrix(nrow = group_size, ncol = Max_members)# matrix with rearrangement of data based on rated people
for(ratee in 1:length(group_members)){ #loop for sorting data for every team member
rd= immediate_team[ratee,4:(4+group_size-2)] # matrix of rated IDs by a specific ratee based on the original order in the data file
value = immediate_team[ratee,valuestart:valueend] # the ratings given by a ratee to the other members
col = 0
j = 1
while(j <= ncol(rd)) #sorts and enters the value given by a ratee to in the appropriate rated member box
{
col = col + 1
rdexact = rd[j] # Specifies the rated member whose rating is being entered
valueexact = value[1, j] # Specifies the rating being entered
if(rdexact == ID[ratee,col]){
res_arranged[col,ratee]= valueexact
# print( res_arranged[col,ratee])
j=j+1
col=0
# t(res_arranged[col,ratee])
}
}
}
final[count_team:(count_team+group_size-1),colstart:colend]=res_arranged
valuestart=valuestart+6
valueend=valueend+6
colstart=colstart+6
colend=colend+6
}
count_team=count_team+group_size
}
View(final)
dim(final)
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
unique_team <- unique(final$Team)
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
print("test1")
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
rowstart_t = 1
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
y
flag1 = 0
rowstart_t = 1
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag1 = flag1 + 1
if(flag1 == 1){
print("test1")
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y1)
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
flag1 = 0
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
if(flag1 == 14){
print("test1")
y1 <- y
}
if(flag1 > 14) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y)
colstart_t = 2   #Starting range of the column
flag1 = 0
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
if(flag1 == 14){
print("test1")
y1 <- y
}
if(flag1 > 14) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y1)
#y1 <- NULL
y1 <- y1[-84,]
#************************ Reordering the Columns *********************************************
reordering_function <- c(sapply(1:5, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,reordering_function]
View(y2)
dim(y2)
final_1 <- cbind(final, y2)
#************************ Reordering the Columns *********************************************
reordering_function <- c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,reordering_function]
View(y2)
dim(y2)
dim(final)
final_1 <- cbind(final, y2)
View(final_1)
getwd()
write.csv(final_1, "Reorganized_Columns.csv")
getwd()
setwd("/Users/madhupgarg123/House_Prices")
train <- read.csv("~/House_Prices/Datasets/train.csv")
View(train)
m
dim(train);
library(dplyr)
attach(train)
# Feature engg by Mujtaba:
train$Remodelling = ifelse((train$YearRemodAdd - train$YearBuilt) > 0, "YES", "NO")
train$BsmtUnf_prop_perc = (train$BsmtUnfSF/train$TotalBsmtSF)
train$age_house = train$YrSold - train$YearBuilt
train$cond_qual = train$OverallCond + train$OverallQual
col_list = colnames(train)
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train[to_factor] = lapply(train[to_factor], factor)
for (i in colnames(train)){
print(i)
print(sum(is.na(train[i])))
}
train_mujtaba = train[, c(1:43)]
train_madhup = train[, c(44:86)]
dim(train_madhup)
dim(train_mujtaba)
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_madhup = train[, c(44:86)]
dim(train);
train_madhup = train[, c(44:85)]
dim(train_madhup)
dim(train_mujtaba)
