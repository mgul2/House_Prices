}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag2 = flag2 + 1
if(flag1 == 1){
print("test1")
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
print(flag2)
}
rowstart_t = 1
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
y
flag1 = 0
rowstart_t = 1
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
y = data.frame()
y1 = data.frame()
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag1 = 0
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
flag1 = flag1 + 1
if(flag1 == 1){
print("test1")
y1 <- y
}
if(flag1 > 1) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y1)
colstart_t = 2   #Starting range of the column
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
flag1 = 0
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
if(flag1 == 14){
print("test1")
y1 <- y
}
if(flag1 > 14) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y)
colstart_t = 2   #Starting range of the column
flag1 = 0
for(i in 1:26) {    # Loop for iterating per question
rowstart_t = 1    # Starting range of the row
flag2 = 0
for (j in unique_team) {    # Loop to iterate through all the teams for responses on 1 question
trans_final_1 <- as.data.frame(t(final[rowstart_t:(rowstart_t+5), colstart_t:(colstart_t+5)]))  # Transpose the matrix of Rater's Response
row.names(trans_final_1) <- NULL      # Remove row names
colnames(trans_final_1) <- NULL       # Remove column names
colnames(trans_final_1) <- c('A', 'B', 'C', 'D', 'E', 'F')   # Add column names of choice
rowstart_t = rowstart_t+6             # Iterate the row numbers
flag1 = flag1 + 1
y <- rbind(y, trans_final_1)      # Add all the transposed matrices together
print(flag1)
}
print("test")
if(flag1 == 14){
print("test1")
y1 <- y
}
if(flag1 > 14) {
y1 <- cbind(y1, y)        # Bind all the responses for different questions together
}
print("test1")
colstart_t = colstart_t + 6     # Iterate the column number
y <- NULL
}
View(y1)
#y1 <- NULL
y1 <- y1[-84,]
#************************ Reordering the Columns *********************************************
reordering_function <- c(sapply(1:5, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,reordering_function]
View(y2)
dim(y2)
final_1 <- cbind(final, y2)
#************************ Reordering the Columns *********************************************
reordering_function <- c(sapply(1:6, function(x) seq(from = x, by = 6, length.out = 26)))
y2 <- y1[,reordering_function]
View(y2)
dim(y2)
dim(final)
final_1 <- cbind(final, y2)
View(final_1)
getwd()
write.csv(final_1, "Reorganized_Columns.csv")
getwd()
setwd("/Users/madhupgarg123/House_Prices")
train <- read.csv("~/House_Prices/Datasets/train.csv")
View(train)
m
dim(train);
library(dplyr)
attach(train)
# Feature engg by Mujtaba:
train$Remodelling = ifelse((train$YearRemodAdd - train$YearBuilt) > 0, "YES", "NO")
train$BsmtUnf_prop_perc = (train$BsmtUnfSF/train$TotalBsmtSF)
train$age_house = train$YrSold - train$YearBuilt
train$cond_qual = train$OverallCond + train$OverallQual
col_list = colnames(train)
to_factor = c(2, 3, 18, 19, 20, 21, 48:53, 55, 57, 62, 72, 77, 78, 82)
train[to_factor] = lapply(train[to_factor], factor)
for (i in colnames(train)){
print(i)
print(sum(is.na(train[i])))
}
train_mujtaba = train[, c(1:43)]
train_madhup = train[, c(44:86)]
dim(train_madhup)
dim(train_mujtaba)
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_mujtaba = train[, c(1:43)]
train_madhup = train[, c(44:86)]
dim(train);
train_madhup = train[, c(44:85)]
dim(train_madhup)
dim(train_mujtaba)
train_mujtaba %>% View()
library(ggplot2)
library(dplyr)
setwd("/Users/mujtabagul/House_Prices/Datasets/")
dat_house = fread("train.csv")
library(data.table)
setwd("/Users/mujtabagul/House_Prices/Datasets/")
dat_house = fread("train.csv")
train_mujtaba %>% View()
train_mujtaba$Alley %>% table()
sum(is.na(train_mujtaba$Alley))
train_mujtaba %>% group_by(age_house) %>%
summarize(SalePrice = mean(SalePrice)) %>%
ggplot(aes(age_house,SalePrice)) +
geom_point() +
geom_smooth() +
ggtitle("Age of House vs Sale Price")
colnames(train_mujtaba)
dat_house %>% group_by(age_house) %>%
summarize(SalePrice = mean(SalePrice)) %>%
ggplot(aes(age_house,SalePrice)) +
geom_point() +
geom_smooth() +
ggtitle("Age of House vs Sale Price")
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba %>% sapply(table)
train_mujtaba %>% View
?purrr
?map
train_mujtaba %>% map(sum(is.na()))
train_mujtaba %>% sapply(sum(is.na()))
train_mujtaba %>% sapply(sum(is.na(train_mujtaba)))
train_mujtaba %>% sapply(function (x) sum(is.na(x)))
?sapply
train_mujtaba$Alley[is.na(train_mujtaba$Alley)] = "No Access"
is.na(train_mujtaba$Alley)
train_mujtaba$Alley %>% replace(.,is.na(.),"No Access")
train_mujtaba$Alley %>% replace(is.na(.),"No Access")
train_mujtaba$Alley %>% replace(is.na(),"No Access")
train_mujtaba$Alley %>% replace_na("No Access")
library(dplyr)
train_mujtaba$Alley %>% replace_na("No Access")
??replace_na
library(tidyr)
train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba %>% View()
train_mujtaba$Alley[which(is.na(train_mujtaba$Alley))]="No Access"
which(is.na(train_mujtaba$Alley))
class
class(train_mujtaba$Alley)
train_mujtaba$Alley[which(is.na(train_mujtaba$Alley %>% as.character))]="No Access"
train_mujtaba$Alley = train_mujtaba$Alley %>% as.character()
train_mujtaba$Alley[which(is.na(train_mujtaba$Alley))]="No Access"
train_mujtaba %>% View
train_mujtaba = train[, c(1:43)]
train_mujtaba %>% View
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba$Alley = train_mujtaba$Alley %>% as.character()
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba %>% View
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% View
train_mujtaba$BsmtQual = train_mujtaba$BsmtQual %>% replace_na("No Basement")
train_mujtaba$BsmtQual %>% class()
train_mujtaba = train[, c(1:43)]
train_mujtaba = train_mujtaba %>% mutate_at(c("LotFrontage","BsmtQual",
"BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2"),
as.character)
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba = train_mujtaba %>% mutate_at(c("LotFrontage","BsmtQual",
"BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley"),
as.character)
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba$BsmtQual = train_mujtaba$BsmtQual %>% replace_na("No Basement")
library(ggplot2)
library(dplyr)
library(tidyr)
library(data.table)
setwd("/Users/mujtabagul/House_Prices/Datasets/")
train_mujtaba = train_mujtaba %>% mutate_at(c("LotFrontage","BsmtQual",
"BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley"),
as.character)
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% sapply(class)
train_mujtaba[c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1",
"BsmtFinType2")] = train_mujtaba[c("BsmtQual","BsmtCond",
"BsmtExposure","BsmtFinType1",
"BsmtFinType2")] %>% replace_na("No Basement")
train_mujtaba[,c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1",
"BsmtFinType2")] = train_mujtaba[,c("BsmtQual","BsmtCond",
"BsmtExposure","BsmtFinType1",
"BsmtFinType2")] %>% replace_na("No Basement")
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
?replace_na
train_mujtaba[,c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1",
"BsmtFinType2")] = train_mujtaba[,c("BsmtQual","BsmtCond",
"BsmtExposure","BsmtFinType1",
"BsmtFinType2")] %>% replace_na(list("No Basement"))
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% View
list("No Basement",5)
list(rep("No Basement",5))
train_mujtaba[,c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1",
"BsmtFinType2")] = train_mujtaba[,c("BsmtQual","BsmtCond",
"BsmtExposure","BsmtFinType1",
"BsmtFinType2")] %>% replace_na(list(rep("No Basement",5)))
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% View
train_mujtaba %>% hist()
train_mujtaba$LotFrontage %>% as.numeric() %>% hist()
train_mujtaba$LotFrontage %>% as.numeric() %>% mean()
train_mujtaba$LotFrontage %>% as.numeric() %>% mean(na.rm=T)
train_mujtaba$LotFrontage %>% as.numeric() %>% median(na.rm=T)
train_mujtaba$LotFrontage %>% as.numeric() %>% sd(na.rm=T)
train_mujtaba %>% group_by(LotFrontage) %>% hist()
train_mujtaba %>% group_by(as.numeric(LotFrontage)) %>% hist()
train_mujtaba$SalePrice %>% mean()
train_mujtaba = train[, c(1:43)]
train_mujtaba = train_mujtaba %>% mutate_at(c("BsmtQual","BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley"),
as.character)
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba$BsmtQual = train_mujtaba$BsmtQual %>% replace_na("No Basement")
train_mujtaba$BsmtExposure = train_mujtaba$BsmtExposure %>% replace_na("No Basement")
train_mujtaba$BsmtCond = train_mujtaba$BsmtCond %>% replace_na("No Basement")
train_mujtaba$BsmtFinType1 = train_mujtaba$BsmtFinType1 %>% replace_na("No Basement")
train_mujtaba$BsmtFinType2 = train_mujtaba$BsmtFinType2 %>% replace_na("No Basement")
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% sapply(class)
train_mujtaba$LotFrontage = train_mujtaba$LotFrontage %>%
replace_na(train_mujtaba$LotFrontage %>% mean(na.rm=T))
train_mujtaba %>% sapply(class)
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% View
train_mujtaba = train_mujtaba %>% mutate_at(c("BsmtQual","BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley",
"MasVnrType"),
as.character)
train_mujtaba$SalePrice = train_madhup$SalePrice
train_mujtaba$Alley = train_mujtaba$Alley %>% replace_na("No Access")
train_mujtaba$BsmtQual = train_mujtaba$BsmtQual %>% replace_na("No Basement")
train_mujtaba$BsmtExposure = train_mujtaba$BsmtExposure %>% replace_na("No Basement")
train_mujtaba$BsmtCond = train_mujtaba$BsmtCond %>% replace_na("No Basement")
train_mujtaba$BsmtFinType1 = train_mujtaba$BsmtFinType1 %>% replace_na("No Basement")
train_mujtaba$BsmtFinType2 = train_mujtaba$BsmtFinType2 %>% replace_na("No Basement")
train_mujtaba$LotFrontage = train_mujtaba$LotFrontage %>%
replace_na(train_mujtaba$LotFrontage %>% mean(na.rm=T))
train_mujtaba$MasVnrType = train_mujtaba$MasVnrType %>% replace_na("None")
train_mujtaba$MasVnrArea = train_mujtaba$MasVnrArea %>% replace_na(0)
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba$Electrical %>% View
train_mujtaba %>% View
train_mujtaba$Electrical %>% table()
train_mujtaba$Electrical %>% class
train_mujtaba = train_mujtaba %>% mutate_at(c("BsmtQual","BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley",
"MasVnrType","Electrical"),
as.character)
train_mujtaba$Electrical = train_mujtaba$Electrical %>% replace_na("SBrkr")
train_mujtaba$Electrical %>% table()
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
train_mujtaba %>% sapply(table)
train_mujtaba %>% sapply(count)
train_mujtaba$Street %>% sapply(count)
train_mujtaba$Street %>% count
train_mujtaba$BsmtQual %>% count
train_mujtaba$BsmtQual %>% table()
?count
train_mujtaba$BsmtQual %>% tbl()
train_mujtaba$BsmtQual %>% tbl() %>% count()
count(train_mujtaba$BsmtQual)
count(train_mujtaba$BsmtQual %>% as.table())
count(train_mujtaba %>% as.table())
dat_house %>% group_by(Neighborhood) %>%
summarise( SalePrice = mean(SalePrice)) %>%
ggplot(aes(Neighborhood)) +
geom_bar(aes(y=SalePrice),colour = "green")
dat_house %>% group_by(Neighborhood) %>%
summarise( SalePrice = mean(SalePrice)) %>%
ggplot(aes(Neighborhood)) +
geom_bar(aes(y=SalePrice),colour = "green", stat = "identity")
dat_house %>% group_by(Neighborhood) %>%
summarise( SalePrice = mean(SalePrice)) %>%
ggplot(aes(Neighborhood)) +
geom_bar(aes(y=SalePrice), stat='identity',colour='green',fill='paleturquoise4') +
ggtitle("Neighbourhood vs Sales Price")
train_mujtaba %>% View
library(ggplot2)
library(dplyr)
library(tidyr)
library(data.table)
train_mujtaba %>% View
train_mujtaba %>% sapply(function(x) sum(is.na(x)))
dat_test = fread("test.csv")
setwd("/Users/mujtabagul/House_Prices/Datasets/")
dat_house = fread("train.csv")
dat_test = fread("test.csv")
colnames(dat_test[,1:43])
colnames(train_mujtaba[,1:43])
test_mujtaba = dat_test[,1:43]
test_mujtaba$SalePrice = NA
test_mujtaba = dat_test[,1:43]
test_mujtaba$SalePrice = 0
dat_complete = rbind(train_mujtaba,test_mujtaba)
dat_complete %>% View
dat_complete %>% sapply(function(x) sum(is.na(x)))
dat_complete = dat_complete %>% mutate_at(c("BsmtQual","BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2","Alley",
"MasVnrType","Electrical"),
as.character)
dat_complete$SalePrice = train_madhup$SalePrice
dat_complete$Alley = dat_complete$Alley %>% replace_na("No Access")
dat_complete$BsmtQual = dat_complete$BsmtQual %>% replace_na("No Basement")
dat_complete$BsmtExposure = dat_complete$BsmtExposure %>% replace_na("No Basement")
dat_complete$BsmtCond = dat_complete$BsmtCond %>% replace_na("No Basement")
dat_complete$BsmtFinType1 = dat_complete$BsmtFinType1 %>% replace_na("No Basement")
dat_complete$BsmtFinType2 = dat_complete$BsmtFinType2 %>% replace_na("No Basement")
dat_complete$MasVnrType = dat_complete$MasVnrType %>% replace_na("None")
dat_complete$LotFrontage = dat_complete$LotFrontage %>%
replace_na(dat_complete$LotFrontage %>% mean(na.rm=T))
dat_complete$MasVnrArea = dat_complete$MasVnrArea %>% replace_na(0)
dat_complete$Electrical = dat_complete$Electrical %>% replace_na("SBrkr")
dat_complete %>% sapply(function(x) sum(is.na(x)))
